import { test, expect } from "vitest";
import { is } from "../index";

const cases: [unknown, string, boolean][] = [
  [-Math.PI, "Number", true],
  [Math.PI, "Number", true],
  [0, "Number", true],
  [1, "Number", true],
  ["123", "String", true],
  ["-123", "String", true],
  [true, "Boolean", true],
  [false, "Boolean", true],
  [NaN, "Number", true],
  [Infinity, "Number", true],
  [-Infinity, "Number", true],
  [undefined, "Undefined", true],
  [null, "Null", true],
  [BigInt(9007199254740991), "BigInt", true],
  [new BigInt64Array([21n, 31n]), "BigInt64Array", true],
  [new BigUint64Array([21n, 31n]), "BigUint64Array", true],
  [new Array(), "Array", true],
  [new Int8Array([21, 31]), "Int8Array", true],
  [new Int16Array([21, 31]), "Int16Array", true],
  [new Int32Array([21, 31]), "Int32Array", true],
  [new Float32Array([21, 31]), "Float32Array", true],
  [new Float64Array([21, 31]), "Float64Array", true],
  [new ArrayBuffer(2), "ArrayBuffer", true],
  [new Uint8Array(2), "Uint8Array", true],
  [new Uint16Array(2), "Uint16Array", true],
  [new Uint32Array(2), "Uint32Array", true],
  [new Buffer(2), "Uint8Array", true],
  [Buffer.alloc(2), "Uint8Array", true],
  [new DataView(new ArrayBuffer(2)), "DataView", true],
  [new SharedArrayBuffer(1024), "SharedArrayBuffer", true],
  [new Error(), "Error", true],
  [new EvalError(), "Error", true],
  [new RangeError(), "Error", true],
  [new ReferenceError(), "Error", true],
  [new SyntaxError(), "Error", true],
  [new URIError(), "Error", true],
  [Symbol('foo'), "Symbol", true],
  [new Intl.Collator("en"), "Intl.Collator", true],
  [new Intl.DateTimeFormat('en-US'), "Intl.DateTimeFormat", true],
  [new Intl.DisplayNames(['en'], { type: 'region' }), "Intl.DisplayNames", true],
  // [new Intl.ListFormat('en'), "Intl.ListFormat", true],
  [new Intl.Locale('ko'), "Intl.Locale", true],
  [new Intl.NumberFormat('ko'), "Intl.NumberFormat", true],
  [new Intl.PluralRules(), "Intl.PluralRules", true],
  [new Intl.RelativeTimeFormat(), "Intl.RelativeTimeFormat", true],
  // [new Intl.Segmenter("ko"), "Intl.Segmenter", true],
  [new Map(), "Map", true],
  [new Set(), "Set", true],
  [new Date(), "Date", true],
  [new RegExp("asd", "g"), "RegExp", true],
  [new Object(), "Object", true],
  [new String(), "String", true],
  [new Proxy({}, {}), "Object", true], // TODO: find the way to tell if its proxy
  [new Function(), "Function", true],
  [new Promise((r) => r(true)), "Promise", true],
  [[], "Array", true],
  [{}, "Object", true],
];

test.each(cases)("is(%s, %s) -> %s", (a, b, c) => {
  expect(is(a, b)).toStrictEqual(c);
});
